Server to handle requests and API for Tennis Canada for tasks relating to
play data. (Players, tournaments, matches mostly)


-- Running on development machine ----------
Before you run, please set the environment variable NODE_ENV to 'production' or 'development'
git-bash$ export NODE_ENV=production
npm run start:prod

TODO - running npm run start and npm run start:development are not working because
TODO - of some issue with ts-node, but I have not done the troubleshooting yet.


== DEPLOYMENT ====================================
-- Apache Configuration ----------

To get apache to forward request to and from the node server, we have to add
the following lines to the httpd.conf file on the rogersrankings.com server or
the local build server file.

ProxyPass /stats http://localhost:3002
ProxyPassReverse /stats http://localhost:3002


== Dependencies/Design notes =====================

-- typeorm --------
We use typeorm as our orm.  There are problems.  I could not get migrations to work
properly, so database changes have to be done in both the code and on the db at
the same time.

During development when you can turf the whole DB and regenerate it, you can go to
the config service and change the line "synchronize": true, but you have to
change it to "false" right away again after the server runs or else it will complain
that the tables already exist for every subsequent run.

I suspect this is all related to using the @nest/typeorm package.

-- log4js ----------
Very good.  Some module does logger = getLogger('some logger name') then
logger.some_level("some message").

Then the log4js_config.json file allows you to set up how you want the
logs handled.  That is, which files to stick logs in from which level.

npm run {whatever} // the options for whatever are in package.json

-- VR Tournament Loader, Rankings Loader

These can be run from the command line like this:

node dist/loadVRTournaments.js
node dist/loadVRVRRankings.js
node dist/loadITFData.js

1) make sure the regular api server has been run at least once first because it loads
   initial data into the database
2) make sure that the production.env file is correct

However, the programs are meant to run periodically and is thus created as a recurring task
using Windows Task Scheduler.

-- TODO ---------------
I added a library "dom" to the tsconfig.json file which solves a compile problem
BUT does not belong here in a node environment.
