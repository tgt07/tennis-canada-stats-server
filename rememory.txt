1) look at the README

Server to handle requests and API for Tennis Canada for tasks relating to
play data. (Players, tournaments, matches mostly)

-- Configuration -----------------


Before you run, please set the environment variable NODE_ENV to 'production' or 'development'
> set NODE_ENV=production
> npm run start:prod

OR

> set NODE_ENV=development
> npm run start:development
I generally have two terminals (Production and Development) with the appropriate environments

then in the environment directory, create a corresponding development.env or production.env file
do not commit these to git

== Dependencies/Design notes =====================

-- typeorm --------
We use typeorm as our orm.  There are problems.  I could not get migrations to work
properly, so database changes have to be done in both the code and on the db at
the same time.

During development when you can turf the whole DB and regenerate it, you can go to
the ormconfig.js file and add the line "synchronize": true, but you have to
change it to "false" right away again after the server runs or else it will complain
that the tables already exist for every subsequent run.

I suspect this is all related to using the @nest/typeorm package.

-- log4js ----------
Very good.  Some module does logger = getLogger('some logger name') then
logger.some_level("some message").

Then the log4js_config.json file allows you to set up how you want the
logs handled.  That is, which files to stick logs in from which level.


npm run {whatever} // the options for whatever are in package.json

-- TODO ---------------
I added a library "dom" to the tsconfig.json file which solves a compile problem
BUT does not belong here in a node environment.